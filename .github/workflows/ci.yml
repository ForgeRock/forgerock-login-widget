name: 'CI Pipeline'
on:
  push:
jobs:
  build:
    needs: [install]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20.10.0, 18.x]
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Restore npm dependencies
        uses: actions/cache/restore@v4
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{matrix.node}}
      - run: npm run build:release
      - uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.node }}
          path: package/*

  install:
    strategy:
      matrix:
        node: [20.10.0, 18.x]
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Node ${{ matrix.node }} Run
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - uses: actions/cache/restore@v4
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies if cache invalid
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
  e2e:
    needs: [build]
    strategy:
      matrix:
        node: [20.10.0]
        os: [macos-latest, ubuntu-latest]
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    runs-on: ${{ matrix.os }}
    env:
      VITE_FR_AM_URL: ${{ secrets.VITE_FR_AM_URL }}
      VITE_FR_AM_COOKIE_NAME: ${{ secrets.VITE_FR_AM_COOKIE_NAME }}
      VITE_FR_OAUTH_PUBLIC_CLIENT: ${{ secrets.VITE_FR_OAUTH_PUBLIC_CLIENT }}
      VITE_FR_REALM_PATH: ${{ secrets.VITE_FR_REALM_PATH }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Restore npm dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{matrix.node}}
            ${{ runner.os }}-npm
      - run: npx playwright install
      - uses: actions/download-artifact@v4
        with:
          name: package-${{ matrix.node }}
          path: package
      - run: npm run build
      - name: e2e
        run: npm run ci:e2e -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{runner.os}}-${{matrix.node}}-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1
  merge-e2e-report:
    strategy:
      matrix:
        node: [20.10.0]
        os: [macos-latest, ubuntu-latest]
    # Merge reports after playwright-tests, even if some shards have failed
    if: always()
    needs: [e2e]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/cache/restore@v4
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --config=merge.config.ts ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt--${{runner.os}}-${{matrix.node}}-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14
  test-lint-storybook-build:
    needs: install
    strategy:
      matrix:
        node: [18.x]
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      VITE_FR_AM_URL: ${{ secrets.VITE_FR_AM_URL }}
      VITE_FR_AM_COOKIE_NAME: ${{ secrets.VITE_FR_AM_COOKIE_NAME }}
      VITE_FR_OAUTH_PUBLIC_CLIENT: ${{ secrets.VITE_FR_OAUTH_PUBLIC_CLIENT }}
      VITE_FR_REALM_PATH: ${{ secrets.VITE_FR_REALM_PATH }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Restore npm dependencies
        uses: actions/cache/restore@v4
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{matrix.node}}
      - run: npm run check:lint
      - run: npm run test
      - name: Build Storybook
        run: npm run build:storybook --quiet
      - name: Serve Storybook and run tests
        if: ${{ runner.os == 'ubuntu-latest' }} # this one hangs on mac os for some reason
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && npm run test:storybook"

  chromatic:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: install
    strategy:
      matrix:
        node: [18.x]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - name: Restore npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{matrix.node}}
      - name: Install dependencies if cache invalid
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - uses: chromaui/action@latest
        with:
          onlyChanged: true
          exitOnceUploaded: true
          traceChanged: true
          diagnostics: true
          buildScriptName: 'build:storybook'
          exitZeroOnChanges: true
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chromatic-build-artifacts-${{ github.run_id }}
          path: |
            chromatic-diagnostics.json
            **/build-storybook.log
